{"uuid":"90a3f8cf-87dc-46e7-bd72-12d6b2a6168e","historyId":"f827a460b5dfb7aa7a408e0aac9ca270","status":"failed","statusDetails":{"message":"The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n    const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n    const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n    const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n    const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n    const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n    \n    const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n    const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n    console.log(\"morningTime\")\n    console.log(morningTime)\n    console.log(\"DOCTOR_DETAIL.openingTimes\")\n    console.log(DOCTOR_DETAIL.openingTimes)\n    console.log(\"includes\")\n    const foundObject = DOCTOR_DETAIL.openingTimes.includes(morningTime);\n  \n    assert.ok(foundObject);\n    // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n    // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n    // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n    // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n    \n  \n    // const currentDate = new Date();\n    // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n    \n    // const openingTimes = DOCTOR_DETAIL.openingTimes\n    \n    // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n    // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n    // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n    // // Loop through each unique day and filter opening times\n    // uniqueDays.forEach(day => {\n    //     const filteredTimes = openingTimes\n    //         .filter(time => time.day === day)\n    //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n    // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n      \n      actual expected\n      \n      falsetrue\n      ","trace":"AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n    const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n    const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n    const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n    const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n    const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n    \n    const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n    const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n    console.log(\"morningTime\")\n    console.log(morningTime)\n    console.log(\"DOCTOR_DETAIL.openingTimes\")\n    console.log(DOCTOR_DETAIL.openingTimes)\n    console.log(\"includes\")\n    const foundObject = DOCTOR_DETAIL.openingTimes.includes(morningTime);\n  \n    assert.ok(foundObject);\n    // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n    // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n    // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n    // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n    \n  \n    // const currentDate = new Date();\n    // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n    \n    // const openingTimes = DOCTOR_DETAIL.openingTimes\n    \n    // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n    // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n    // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n    // // Loop through each unique day and filter opening times\n    // uniqueDays.forEach(day => {\n    //     const filteredTimes = openingTimes\n    //         .filter(time => time.day === day)\n    //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n    // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n\n    at Context.<anonymous> (file:///D:/ClickDoc/test/specs/searchPage.ts:48:16)"},"stage":"finished","steps":[{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"8ebf8481-3567-499a-b624-965b29c28bbf-attachment.txt"},{"name":"Response","type":"text/plain","source":"d6adb835-799f-4e40-9bab-0fd5b1dd4635-attachment.txt"}],"parameters":[],"start":1709048896487,"name":"POST /session/:sessionId/element","stop":1709048896500},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"03c5c03d-f2dc-4705-be93-c2d2d52acf23-attachment.json"}],"parameters":[],"start":1709048896503,"name":"GET /session/:sessionId/element/C071B0C3D4ADE1BDE2217C9207CAD624_element_82/text","stop":1709048896510},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"bfbada7f-0ddf-4077-a814-e5fcb956ea03-attachment.txt"},{"name":"Response","type":"text/plain","source":"dcd60db9-e253-4201-be0c-2c967c426013-attachment.txt"}],"parameters":[],"start":1709048896511,"name":"POST /session/:sessionId/element","stop":1709048896523},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"d96a0f09-77f9-451a-94e2-47df0d35ff45-attachment.json"}],"parameters":[],"start":1709048896525,"name":"GET /session/:sessionId/element/C071B0C3D4ADE1BDE2217C9207CAD624_element_83/text","stop":1709048896533},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"7ff544e6-d727-4bfd-b27d-e23948534edc-attachment.txt"},{"name":"Response","type":"text/plain","source":"4fbc052c-3911-4be0-a36b-81b094f69ac7-attachment.txt"}],"parameters":[],"start":1709048896533,"name":"POST /session/:sessionId/element","stop":1709048896545},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"c1f55c1f-559d-4580-a19a-1192a5c95a58-attachment.json"}],"parameters":[],"start":1709048896548,"name":"GET /session/:sessionId/element/C071B0C3D4ADE1BDE2217C9207CAD624_element_84/text","stop":1709048896556},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"b61e4221-28d4-4a84-8835-e756f13dcacf-attachment.txt"},{"name":"Response","type":"text/plain","source":"a2c25233-24fe-4e03-9a92-187725b17144-attachment.txt"}],"parameters":[],"start":1709048896557,"name":"POST /session/:sessionId/element","stop":1709048896570},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"15ddbaff-b367-42b5-96a7-ab6c9d11feed-attachment.json"}],"parameters":[],"start":1709048896571,"name":"GET /session/:sessionId/element/C071B0C3D4ADE1BDE2217C9207CAD624_element_85/text","stop":1709048896582},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"74e96bb4-1314-430a-a641-1e391d2c275b-attachment.txt"},{"name":"Response","type":"text/plain","source":"573767b2-55b7-4990-a6bb-b6d03d430589-attachment.txt"}],"parameters":[],"start":1709048896582,"name":"POST /session/:sessionId/element","stop":1709048896594},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"b9a24493-add7-429b-90e0-af54a6fb4958-attachment.json"}],"parameters":[],"start":1709048896596,"name":"GET /session/:sessionId/element/C071B0C3D4ADE1BDE2217C9207CAD624_element_86/text","stop":1709048896606},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Screenshot","type":"image/png","source":"ec07fedb-0a2f-4043-a3fe-46c6d368bc50-attachment.png"},{"name":"Response","type":"application/json","source":"dbd3bcfc-1ac3-4e5c-8093-aaf14785ee48-attachment.json"}],"parameters":[],"start":1709048896618,"name":"GET /session/:sessionId/screenshot","stop":1709048896777}],"attachments":[],"parameters":[{"name":"browser","value":"chrome-121.0.6167.189"}],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"wdio"},{"name":"package","value":"D:.ClickDoc.test.specs.searchPage.ts"},{"name":"thread","value":"0-0"},{"name":"suite","value":"search here"},{"name":"feature","value":"search here"}],"links":[],"start":1709048896487,"name":"should show the opening hours of current day","testCaseId":"f827a460b5dfb7aa7a408e0aac9ca270","stop":1709048896782}