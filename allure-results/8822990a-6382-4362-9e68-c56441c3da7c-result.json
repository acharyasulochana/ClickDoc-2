{"uuid":"8822990a-6382-4362-9e68-c56441c3da7c","historyId":"f827a460b5dfb7aa7a408e0aac9ca270","status":"failed","statusDetails":{"message":"The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n      const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n      const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      \n      const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n      const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n      console.log(\"morningTime\")\n      console.log(morningTime)\n      console.log(\"DOCTOR_DETAIL.openingTimes\")\n      console.log(DOCTOR_DETAIL.openingTimes)\n      console.log(\"includes\")\n      const foundObject = DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      console.log(foundObject)\n      assert.ok(foundObject);\n      // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n      // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n      // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n      \n  \n      // const currentDate = new Date();\n      // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n      \n      // const openingTimes = DOCTOR_DETAIL.openingTimes\n      \n      // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n      // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n      // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n      // // Loop through each unique day and filter opening times\n      // uniqueDays.forEach(day => {\n      //     const filteredTimes = openingTimes\n      //         .filter(time => time.day === day)\n      //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n      // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n      \n      actual expected\n      \n      falsetrue\n      ","trace":"AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n      const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n      const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      \n      const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n      const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n      console.log(\"morningTime\")\n      console.log(morningTime)\n      console.log(\"DOCTOR_DETAIL.openingTimes\")\n      console.log(DOCTOR_DETAIL.openingTimes)\n      console.log(\"includes\")\n      const foundObject = DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      console.log(foundObject)\n      assert.ok(foundObject);\n      // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n      // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n      // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n      \n  \n      // const currentDate = new Date();\n      // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n      \n      // const openingTimes = DOCTOR_DETAIL.openingTimes\n      \n      // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n      // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n      // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n      // // Loop through each unique day and filter opening times\n      // uniqueDays.forEach(day => {\n      //     const filteredTimes = openingTimes\n      //         .filter(time => time.day === day)\n      //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n      // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n\n    at Context.<anonymous> (file:///D:/ClickDoc/test/specs/searchPage.ts:49:16)"},"stage":"finished","steps":[{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"cd631920-c172-42cb-add5-4e9095c2f664-attachment.txt"},{"name":"Response","type":"text/plain","source":"f56065c3-7703-4acb-8838-07e0780093f3-attachment.txt"}],"parameters":[],"start":1709048771486,"name":"POST /session/:sessionId/element","stop":1709048771499},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"421ce5ef-b296-4ecf-8f16-332251d906c0-attachment.json"}],"parameters":[],"start":1709048771501,"name":"GET /session/:sessionId/element/9C948D30B976A60179CDD37D210DA59B_element_83/text","stop":1709048771512},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"dde463f6-e34c-466c-80a3-cf64b99c885f-attachment.txt"},{"name":"Response","type":"text/plain","source":"2262d034-4390-478c-be56-64395ef7e239-attachment.txt"}],"parameters":[],"start":1709048771513,"name":"POST /session/:sessionId/element","stop":1709048771525},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"5f16d797-7b84-42e1-940d-51ab7441ee4a-attachment.json"}],"parameters":[],"start":1709048771527,"name":"GET /session/:sessionId/element/9C948D30B976A60179CDD37D210DA59B_element_84/text","stop":1709048771535},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"0171cb29-9559-4fcb-918a-03b41903821d-attachment.txt"},{"name":"Response","type":"text/plain","source":"43e47d97-dbb2-4311-8426-3261db189441-attachment.txt"}],"parameters":[],"start":1709048771535,"name":"POST /session/:sessionId/element","stop":1709048771548},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"58019843-7e5b-435e-a0f5-ce08cec0b98c-attachment.json"}],"parameters":[],"start":1709048771550,"name":"GET /session/:sessionId/element/9C948D30B976A60179CDD37D210DA59B_element_85/text","stop":1709048771559},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"9f54b937-1da4-4cc6-95b8-8c93c8f4a7ca-attachment.txt"},{"name":"Response","type":"text/plain","source":"9175ee86-1d26-452d-bf68-c0f1a376277d-attachment.txt"}],"parameters":[],"start":1709048771559,"name":"POST /session/:sessionId/element","stop":1709048771571},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"0618f7a6-066c-481d-a751-cdf79d4823ce-attachment.json"}],"parameters":[],"start":1709048771573,"name":"GET /session/:sessionId/element/9C948D30B976A60179CDD37D210DA59B_element_86/text","stop":1709048771581},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"ac815552-f6bc-44fd-a0c1-297d6aa86161-attachment.txt"},{"name":"Response","type":"text/plain","source":"8e774d9f-c255-4762-8d3c-7814c3906ad5-attachment.txt"}],"parameters":[],"start":1709048771581,"name":"POST /session/:sessionId/element","stop":1709048771593},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"4aa34595-c9cb-463d-bc9c-c77152e1b185-attachment.json"}],"parameters":[],"start":1709048771595,"name":"GET /session/:sessionId/element/9C948D30B976A60179CDD37D210DA59B_element_87/text","stop":1709048771602},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Screenshot","type":"image/png","source":"96b153cb-46a5-49ca-8e86-a21bc9a2afa8-attachment.png"},{"name":"Response","type":"application/json","source":"5b76e155-a845-4b7a-b284-40ce53554542-attachment.json"}],"parameters":[],"start":1709048771615,"name":"GET /session/:sessionId/screenshot","stop":1709048771769}],"attachments":[],"parameters":[{"name":"browser","value":"chrome-121.0.6167.189"}],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"wdio"},{"name":"package","value":"D:.ClickDoc.test.specs.searchPage.ts"},{"name":"thread","value":"0-0"},{"name":"suite","value":"search here"},{"name":"feature","value":"search here"}],"links":[],"start":1709048771485,"name":"should show the opening hours of current day","testCaseId":"f827a460b5dfb7aa7a408e0aac9ca270","stop":1709048771773}