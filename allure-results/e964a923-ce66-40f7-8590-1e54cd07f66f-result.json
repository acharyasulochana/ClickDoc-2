{"uuid":"e964a923-ce66-40f7-8590-1e54cd07f66f","historyId":"f827a460b5dfb7aa7a408e0aac9ca270","status":"failed","statusDetails":{"message":"The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n      const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n      const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      \n      const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n      const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n      console.log(\"morningTime\")\n      console.log(morningTime)\n      console.log(\"DOCTOR_DETAIL.openingTimes\")\n      console.log(DOCTOR_DETAIL.openingTimes)\n      console.log(\"includes\")\n      const foundObject = DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      console.log(foundObject)\n      assert.ok(foundObject);\n      // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n      // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n      // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n      \n  \n      // const currentDate = new Date();\n      // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n      \n      // const openingTimes = DOCTOR_DETAIL.openingTimes\n      \n      // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n      // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n      // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n      // // Loop through each unique day and filter opening times\n      // uniqueDays.forEach(day => {\n      //     const filteredTimes = openingTimes\n      //         .filter(time => time.day === day)\n      //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n      // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n      \n      actual expected\n      \n      falsetrue\n      ","trace":"AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n      const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n      const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      \n      const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n      const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n      console.log(\"morningTime\")\n      console.log(morningTime)\n      console.log(\"DOCTOR_DETAIL.openingTimes\")\n      console.log(DOCTOR_DETAIL.openingTimes)\n      console.log(\"includes\")\n      const foundObject = DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      console.log(foundObject)\n      assert.ok(foundObject);\n      // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n      // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n      // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n      \n  \n      // const currentDate = new Date();\n      // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n      \n      // const openingTimes = DOCTOR_DETAIL.openingTimes\n      \n      // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n      // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n      // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n      // // Loop through each unique day and filter opening times\n      // uniqueDays.forEach(day => {\n      //     const filteredTimes = openingTimes\n      //         .filter(time => time.day === day)\n      //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n      // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n\n    at Context.<anonymous> (file:///D:/ClickDoc/test/specs/searchPage.ts:49:16)"},"stage":"finished","steps":[{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"a11bdbb8-4a17-4190-a6ab-0bb8425a110a-attachment.txt"},{"name":"Response","type":"text/plain","source":"d4ce67e9-d13c-4b83-b405-c9b45aa309fe-attachment.txt"}],"parameters":[],"start":1709048821832,"name":"POST /session/:sessionId/element","stop":1709048821848},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"2fd28c3d-a59b-4169-a09f-2d26ec5630a2-attachment.json"}],"parameters":[],"start":1709048821851,"name":"GET /session/:sessionId/element/8A2B37887A5771511CBB3EE6708EDAFF_element_82/text","stop":1709048821862},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"7aeda392-ab6d-4deb-bd75-07ad5ba244c9-attachment.txt"},{"name":"Response","type":"text/plain","source":"9e9c4a63-968d-4884-9bf3-6cb378ca63dd-attachment.txt"}],"parameters":[],"start":1709048821863,"name":"POST /session/:sessionId/element","stop":1709048821879},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"52c14519-1441-4f1a-87ad-f087a79b9828-attachment.json"}],"parameters":[],"start":1709048821882,"name":"GET /session/:sessionId/element/8A2B37887A5771511CBB3EE6708EDAFF_element_83/text","stop":1709048821895},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"b2b10ff3-e1fb-490a-b769-ce2b31050733-attachment.txt"},{"name":"Response","type":"text/plain","source":"f963e196-3821-4a5b-9be8-30078d47122d-attachment.txt"}],"parameters":[],"start":1709048821895,"name":"POST /session/:sessionId/element","stop":1709048821910},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"55b99c30-f401-4743-a0de-6fd11e9833fd-attachment.json"}],"parameters":[],"start":1709048821912,"name":"GET /session/:sessionId/element/8A2B37887A5771511CBB3EE6708EDAFF_element_84/text","stop":1709048821925},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"dd293c65-8f86-4935-ad3c-3059cb5b27e4-attachment.txt"},{"name":"Response","type":"text/plain","source":"3beea7b7-2cf6-49a9-a572-409df9864e42-attachment.txt"}],"parameters":[],"start":1709048821925,"name":"POST /session/:sessionId/element","stop":1709048821942},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"d0ee90ad-8c8c-489c-b4b8-64a8997feaa1-attachment.json"}],"parameters":[],"start":1709048821944,"name":"GET /session/:sessionId/element/8A2B37887A5771511CBB3EE6708EDAFF_element_85/text","stop":1709048821955},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"751a9e07-437c-4be9-b05b-c55a39fee761-attachment.txt"},{"name":"Response","type":"text/plain","source":"0d7c8df7-26e2-478c-8f57-28ec7836f73a-attachment.txt"}],"parameters":[],"start":1709048821955,"name":"POST /session/:sessionId/element","stop":1709048821973},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"f622a1bf-9035-4f1c-8583-87e9dc7a3de8-attachment.json"}],"parameters":[],"start":1709048821975,"name":"GET /session/:sessionId/element/8A2B37887A5771511CBB3EE6708EDAFF_element_86/text","stop":1709048821983},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Screenshot","type":"image/png","source":"6b441163-4e14-4ba1-a745-9d30f4ec19c4-attachment.png"},{"name":"Response","type":"application/json","source":"714d4ac4-4a66-4b43-8310-8e4ab18e48c8-attachment.json"}],"parameters":[],"start":1709048821998,"name":"GET /session/:sessionId/screenshot","stop":1709048822164}],"attachments":[],"parameters":[{"name":"browser","value":"chrome-121.0.6167.189"}],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"wdio"},{"name":"package","value":"D:.ClickDoc.test.specs.searchPage.ts"},{"name":"thread","value":"0-0"},{"name":"suite","value":"search here"},{"name":"feature","value":"search here"}],"links":[],"start":1709048821831,"name":"should show the opening hours of current day","testCaseId":"f827a460b5dfb7aa7a408e0aac9ca270","stop":1709048822167}