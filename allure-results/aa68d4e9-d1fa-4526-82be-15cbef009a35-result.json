{"uuid":"aa68d4e9-d1fa-4526-82be-15cbef009a35","historyId":"f827a460b5dfb7aa7a408e0aac9ca270","status":"failed","statusDetails":{"message":"The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n      const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n      const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      \n      const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n      const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n      console.log(\"morningTime\")\n      console.log(morningTime)\n      console.log(\"DOCTOR_DETAIL.openingTimes\")\n      console.log(DOCTOR_DETAIL.openingTimes)\n      console.log(\"includes\")\n      const foundObject = DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      console.log(foundObject)\n      assert.ok(foundObject);\n      // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n      // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n      // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n      \n  \n      // const currentDate = new Date();\n      // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n      \n      // const openingTimes = DOCTOR_DETAIL.openingTimes\n      \n      // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n      // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n      // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n      // // Loop through each unique day and filter opening times\n      // uniqueDays.forEach(day => {\n      //     const filteredTimes = openingTimes\n      //         .filter(time => time.day === day)\n      //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n      // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n      \n      actual expected\n      \n      falsetrue\n      ","trace":"AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n      const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n      const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n      const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n      \n      const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n      const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n      console.log(\"morningTime\")\n      console.log(morningTime)\n      console.log(\"DOCTOR_DETAIL.openingTimes\")\n      console.log(DOCTOR_DETAIL.openingTimes)\n      console.log(\"includes\")\n      const foundObject = DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      console.log(foundObject)\n      assert.ok(foundObject);\n      // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n      // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n      // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n      // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n      \n  \n      // const currentDate = new Date();\n      // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n      \n      // const openingTimes = DOCTOR_DETAIL.openingTimes\n      \n      // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n      // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n      // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n      // // Loop through each unique day and filter opening times\n      // uniqueDays.forEach(day => {\n      //     const filteredTimes = openingTimes\n      //         .filter(time => time.day === day)\n      //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n      // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n\n    at Context.<anonymous> (file:///D:/ClickDoc/test/specs/searchPage.ts:49:16)"},"stage":"finished","steps":[{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"129f75c2-5c9a-45fd-9018-bfedff596831-attachment.txt"},{"name":"Response","type":"text/plain","source":"e234d7d5-e2e0-4956-815f-2ace5b8e1377-attachment.txt"}],"parameters":[],"start":1709048712244,"name":"POST /session/:sessionId/element","stop":1709048712256},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"3f77658d-ec3f-4207-9386-acacf4271fba-attachment.json"}],"parameters":[],"start":1709048712259,"name":"GET /session/:sessionId/element/564416AB04BCE1B174F9AEA02CB15C09_element_82/text","stop":1709048712274},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"07e73941-1cd5-4989-b3f2-66d635c3a6c0-attachment.txt"},{"name":"Response","type":"text/plain","source":"144c1ea9-4728-40bb-b24f-ff7f6206293f-attachment.txt"}],"parameters":[],"start":1709048712274,"name":"POST /session/:sessionId/element","stop":1709048712302},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"b3a83087-2335-4158-9097-1eca09b79271-attachment.json"}],"parameters":[],"start":1709048712306,"name":"GET /session/:sessionId/element/564416AB04BCE1B174F9AEA02CB15C09_element_83/text","stop":1709048712320},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"ab9b7b93-0407-431a-afc9-fcdc0a3c0f58-attachment.txt"},{"name":"Response","type":"text/plain","source":"5dc87084-c3a6-427f-9504-388c47db97e1-attachment.txt"}],"parameters":[],"start":1709048712320,"name":"POST /session/:sessionId/element","stop":1709048712338},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"7d2f8f0a-2e60-41dd-b982-0694db677fe0-attachment.json"}],"parameters":[],"start":1709048712341,"name":"GET /session/:sessionId/element/564416AB04BCE1B174F9AEA02CB15C09_element_84/text","stop":1709048712349},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"af8265ee-65a1-41c1-b8d4-d4962e2d50a8-attachment.txt"},{"name":"Response","type":"text/plain","source":"40a02f7f-280a-445f-b776-4a6ec700d155-attachment.txt"}],"parameters":[],"start":1709048712349,"name":"POST /session/:sessionId/element","stop":1709048712364},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"668611d0-55ec-46fa-900c-e505a39d9340-attachment.json"}],"parameters":[],"start":1709048712366,"name":"GET /session/:sessionId/element/564416AB04BCE1B174F9AEA02CB15C09_element_85/text","stop":1709048712378},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"bb91b015-addf-4d6d-8132-2e37deb8e530-attachment.txt"},{"name":"Response","type":"text/plain","source":"ce3c9a32-f90d-4ba3-9f9a-2a5dfcd03dc8-attachment.txt"}],"parameters":[],"start":1709048712378,"name":"POST /session/:sessionId/element","stop":1709048712392},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"83525bf4-91f6-478a-8f23-e88cfdeb826a-attachment.json"}],"parameters":[],"start":1709048712395,"name":"GET /session/:sessionId/element/564416AB04BCE1B174F9AEA02CB15C09_element_86/text","stop":1709048712406},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Screenshot","type":"image/png","source":"10848a17-28c0-4a26-b30d-426f8e9c6895-attachment.png"},{"name":"Response","type":"application/json","source":"95be5f77-a0a5-454c-b0e6-917ff90e629f-attachment.json"}],"parameters":[],"start":1709048712423,"name":"GET /session/:sessionId/screenshot","stop":1709048712569}],"attachments":[],"parameters":[{"name":"browser","value":"chrome-121.0.6167.189"}],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"wdio"},{"name":"package","value":"D:.ClickDoc.test.specs.searchPage.ts"},{"name":"thread","value":"0-0"},{"name":"suite","value":"search here"},{"name":"feature","value":"search here"}],"links":[],"start":1709048712244,"name":"should show the opening hours of current day","testCaseId":"f827a460b5dfb7aa7a408e0aac9ca270","stop":1709048712571}