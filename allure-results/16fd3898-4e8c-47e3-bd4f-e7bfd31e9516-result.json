{"uuid":"16fd3898-4e8c-47e3-bd4f-e7bfd31e9516","historyId":"f827a460b5dfb7aa7a408e0aac9ca270","status":"failed","statusDetails":{"message":"The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n    const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n    const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n    const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n    const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n    const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n    \n    const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n    const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n    console.log(\"morningTime\")\n    console.log(morningTime)\n    console.log(\"DOCTOR_DETAIL.openingTimes\")\n    console.log(DOCTOR_DETAIL.openingTimes)\n    console.log(\"includes\")\n    const foundObject = DOCTOR_DETAIL.openingTimes.find((details) => { (details.day === morningTime.day) && (details.endTime === morningTime.endTime) && (details.startTime === morningTime.startTime) });\n    \n    assert.ok(foundObject);\n    // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n    // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n    // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n    // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n    \n  \n    // const currentDate = new Date();\n    // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n    \n    // const openingTimes = DOCTOR_DETAIL.openingTimes\n    \n    // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n    // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n    // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n    // // Loop through each unique day and filter opening times\n    // uniqueDays.forEach(day => {\n    //     const filteredTimes = openingTimes\n    //         .filter(time => time.day === day)\n    //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n    // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n      \n      actual expected\n      \n      undefinedtrue\n      ","trace":"AssertionError [ERR_ASSERTION]: The expression evaluated to a falsy value:\n\n  it(\"should show the opening hours of current day\", async() =>{\n  \n    const day = await $(\"//div[@class = 'text-day__item--text current-date']\").getText();\n    const morningStartTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n    const morningEndTime = await $(\"//div[@class = 'text-day-hour__item current-date first ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n    const afternoonStartTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-startTime']\").getText();\n    const afternoonEndTime = await $(\"//div[@class = 'text-day-hour__item current-date ng-star-inserted']/div[@class= 'text-day-hour__text-endTime']\").getText();\n    \n    const morningTime = {\"day\": day, \"startTime\": morningStartTime, \"endTime\": morningEndTime};\n    const EveningTime = {\"day\": day, \"startTime\": afternoonStartTime, \"endTime\": afternoonEndTime};\n  \n    console.log(\"morningTime\")\n    console.log(morningTime)\n    console.log(\"DOCTOR_DETAIL.openingTimes\")\n    console.log(DOCTOR_DETAIL.openingTimes)\n    console.log(\"includes\")\n    const foundObject = DOCTOR_DETAIL.openingTimes.find((details) => { (details.day === morningTime.day) && (details.endTime === morningTime.endTime) && (details.startTime === morningTime.startTime) });\n    \n    assert.ok(foundObject);\n    // expect(DOCTOR_DETAIL.openingTimes).toContainEqual(expect.objectContaining(morningTime));\n  \n    // await expect(DOCTOR_DETAIL.openingTimes).t .toHaveText(morningStartTime);\n  \n    // DOCTOR_DETAIL.openingTimes.includes(morningTime);\n    // DOCTOR_DETAIL.openingTimes.includes(EveningTime);\n  \n  \n    \n  \n    // const currentDate = new Date();\n    // const dayName = currentDate.toLocaleDateString('de-DE', { weekday: 'long' }).substring(0,2)+ '.';\n    \n    // const openingTimes = DOCTOR_DETAIL.openingTimes\n    \n    // const filteredTimes = openingTimes.filter(time => time.day === dayName);\n    // console.log(`Opening times for ${dayName}:`, filteredTimes);\n  \n  \n    // const uniqueDays = [...new Set(openingTimes.map(time => time.day))];\n  \n    // // Loop through each unique day and filter opening times\n    // uniqueDays.forEach(day => {\n    //     const filteredTimes = openingTimes\n    //         .filter(time => time.day === day)\n    //         .map(({ day, startTime, endTime }) => ({ day, startTime, endTime }));\n  \n    // console.log(`Opening times for this time ${day}:`, filteredTimes);\n  \n  })\n\n    at Context.<anonymous> (file:///D:/ClickDoc/test/specs/searchPage.ts:48:16)"},"stage":"finished","steps":[{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"fea4a4fb-261e-44ca-a8d7-f7c63fb33c5b-attachment.txt"},{"name":"Response","type":"text/plain","source":"d4e5a77a-37ec-49e3-b620-908a7decd45f-attachment.txt"}],"parameters":[],"start":1709049054976,"name":"POST /session/:sessionId/element","stop":1709049054988},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"17977d84-4a8d-4e1d-b652-18d1195553d4-attachment.json"}],"parameters":[],"start":1709049054991,"name":"GET /session/:sessionId/element/A1E18735FAA2F13F4AA427603D197056_element_84/text","stop":1709049055000},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"aa27b446-30b4-4c53-a8e2-050c9d652ed1-attachment.txt"},{"name":"Response","type":"text/plain","source":"9d13042b-5d72-4f9b-97ec-d8974aa32e02-attachment.txt"}],"parameters":[],"start":1709049055000,"name":"POST /session/:sessionId/element","stop":1709049055013},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"093364ed-485d-418c-891e-abd7bdfca1b6-attachment.json"}],"parameters":[],"start":1709049055015,"name":"GET /session/:sessionId/element/A1E18735FAA2F13F4AA427603D197056_element_85/text","stop":1709049055022},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"6004368e-afa3-46a0-b73e-967d1f33a9f2-attachment.txt"},{"name":"Response","type":"text/plain","source":"ca8654cd-2c29-4faa-9b27-df3b9f461eb6-attachment.txt"}],"parameters":[],"start":1709049055023,"name":"POST /session/:sessionId/element","stop":1709049055037},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"bea269dd-fb60-417d-b499-c9756c213096-attachment.json"}],"parameters":[],"start":1709049055039,"name":"GET /session/:sessionId/element/A1E18735FAA2F13F4AA427603D197056_element_86/text","stop":1709049055060},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"174fa8b6-c365-465e-a586-b1b6a14cda9a-attachment.txt"},{"name":"Response","type":"text/plain","source":"ec550b7c-1094-4255-91b8-806ce7bfc5ef-attachment.txt"}],"parameters":[],"start":1709049055060,"name":"POST /session/:sessionId/element","stop":1709049055072},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"4d38c51d-09ff-4aeb-86ed-250a15fe7176-attachment.json"}],"parameters":[],"start":1709049055073,"name":"GET /session/:sessionId/element/A1E18735FAA2F13F4AA427603D197056_element_87/text","stop":1709049055096},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Request","type":"text/plain","source":"785e6cf9-f072-4824-9358-83b8130e516b-attachment.txt"},{"name":"Response","type":"text/plain","source":"92e13d25-5bf3-46f8-9193-c1ec472a0587-attachment.txt"}],"parameters":[],"start":1709049055096,"name":"POST /session/:sessionId/element","stop":1709049055109},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Response","type":"application/json","source":"e4e05b62-da5a-4073-a93a-faf84a4c106b-attachment.json"}],"parameters":[],"start":1709049055111,"name":"GET /session/:sessionId/element/A1E18735FAA2F13F4AA427603D197056_element_88/text","stop":1709049055119},{"status":"passed","statusDetails":{},"stage":"finished","steps":[],"attachments":[{"name":"Screenshot","type":"image/png","source":"f5353ddd-b8dc-4fd6-8789-d50586068ebe-attachment.png"},{"name":"Response","type":"application/json","source":"134079c4-00b0-43fe-980b-09408baab5b4-attachment.json"}],"parameters":[],"start":1709049055132,"name":"GET /session/:sessionId/screenshot","stop":1709049055328}],"attachments":[],"parameters":[{"name":"browser","value":"chrome-121.0.6167.189"}],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"wdio"},{"name":"package","value":"D:.ClickDoc.test.specs.searchPage.ts"},{"name":"thread","value":"0-0"},{"name":"suite","value":"search here"},{"name":"feature","value":"search here"}],"links":[],"start":1709049054974,"name":"should show the opening hours of current day","testCaseId":"f827a460b5dfb7aa7a408e0aac9ca270","stop":1709049055331}